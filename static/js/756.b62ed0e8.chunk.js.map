{"version":3,"file":"static/js/756.b62ed0e8.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","components/ListContacts/ListContacts.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addFilter } from 'store/contactsReducer';\nimport { TextField, Typography, Box } from '@mui/material';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    const filter = event.target.value;\n    dispatch(addFilter(filter));\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 2,\n      }}\n    >\n      <Typography variant=\"h5\" component=\"h3\">\n        Find contacts by name\n      </Typography>\n      <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        onChange={changeFilter}\n        inputProps={{\n          pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n          title:\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGetContacts } from '../../store/selectors';\nimport { addContact } from '../../store/operations';\nimport { TextField, Button, Box } from '@mui/material';\n\nexport const ContactForm = ({ title }) => {\n  const contacts = useSelector(selectGetContacts);\n  const dispatch = useDispatch();\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const formatPhone = number => {\n      return number.replace(/(\\d{3})(\\d{2})(\\d{2})/, `$1-$2-$3`);\n    };\n\n    const contactName = form.elements.name.value.toLowerCase();\n    const contactPhone = formatPhone(form.elements.number.value);\n    const contact = {\n      id: nanoid(),\n      name: form.elements.name.value,\n      number: contactPhone,\n      createAt: nanoid(),\n    };\n\n    const isContactExists = contacts.some(\n      existingContact =>\n        existingContact.name.toLowerCase() === contactName &&\n        existingContact.number === contactPhone\n    );\n\n    if (isContactExists) {\n      alert(\n        `${form.elements.name.value} is already in contacts with the same phone number.`\n      );\n    } else {\n      dispatch(addContact(contact));\n    }\n\n    form.reset();\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n      <h2>{title}</h2>\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        id={nameId}\n        label=\"Name\"\n        name=\"name\"\n        type=\"text\"\n        autoComplete=\"name\"\n        autoFocus\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        name=\"number\"\n        label=\"Number\"\n        type=\"tel\"\n        id={numberId}\n        autoComplete=\"tel\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n      />\n      <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n        Add Contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../store/operations';\nimport { selectContacts } from '../../store/selectors';\nimport { List, ListItem, ListItemText, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectContacts);\n\n  return (\n    <List>\n      {filteredContacts.map(contact => (\n        <ListItem\n          key={contact.id}\n          style={{ margin: '10px 0' }}\n          secondaryAction={\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          }\n        >\n          <ListItemText primary={`${contact.name}: ${contact.number}`} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { ThreeCircles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <ThreeCircles\n        height=\"100\"\n        width=\"100\"\n        color=\"#0a0b0a\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import ContactList from 'components/ContactList/ContactList';\nimport { selectGetIsLoading } from 'store/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../store/operations';\n\nexport const ListContacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const loading = useSelector(selectGetIsLoading);\n\n  return <div>{loading ? <Loader /> : <ContactList />}</div>;\n};\n","import Filter from 'components/Filter/Filter';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { ListContacts } from '../../components/ListContacts/ListContacts';\nimport { Contacts } from '@mui/icons-material';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts />\n      <ListContacts />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Filter","dispatch","useDispatch","_jsxs","Box","sx","display","flexDirection","alignItems","gap","children","_jsx","Typography","variant","component","TextField","label","onChange","event","filter","target","value","addFilter","inputProps","pattern","title","_ref","contacts","useSelector","selectGetContacts","nameId","nanoid","numberId","onSubmit","e","preventDefault","form","currentTarget","contactName","elements","name","toLowerCase","contactPhone","number","replace","contact","id","createAt","some","existingContact","alert","concat","addContact","reset","noValidate","mt","margin","required","fullWidth","type","autoComplete","autoFocus","Button","mb","ContactList","filteredContacts","selectContacts","List","map","ListItem","style","secondaryAction","IconButton","edge","onClick","deleteContact","DeleteIcon","ListItemText","primary","Loader","ThreeCircles","height","width","color","visible","ariaLabel","ListContacts","useEffect","fetchContacts","loading","selectGetIsLoading","ContactsPage","ContactForm","Contacts"],"sourceRoot":""}